// –ö–∞—Ä—Ç–∞ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏—Ö –∑–¥–∞—Ç–Ω–æ—Å—Ç–µ–π –º–µ–≥–∞–ø—ñ–∫—Å–µ–ª—ñ–≤ –¥–æ —à–∏—Ä–∏–Ω–∏ –≤ –ø—ñ–∫—Å–µ–ª—è—Ö
const RESOLUTION_MAP = {
    12.0: 4000, 8.0: 3840, 6.0: 3072, 5.0: 2560, 4.0: 2688,
    3.6: 2560, 3.0: 2048, 2.0: 1920, 1.3: 1280, 1.0: 1280
};

// –ü–æ—Ä–æ–≥–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è DORI
const DORI_THRESHOLDS = {
    "üÜî –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è (—á—ñ—Ç–∫–æ —ñ–¥–µ–Ω. –æ—Å–æ–±—É)": 250, 
    "üë§ –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è (–≤–ø—ñ–∑–Ω–∞—Ç–∏ –∑–Ω–∞–π–æ–º—É –æ—Å–æ–±—É)": 125,
    "üëÄ –û–≥–ª—è–¥ (–¥–µ—Ç–∞–ª—ñ –æ—Å–æ–±–∏/–æ–¥—è–≥)": 62, 
    "üîç –î–µ—Ç–µ–∫—Ü—ñ—è (–≤–∏—è–≤–∏—Ç–∏ —Ä—É—Ö/–Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ª—é–¥–∏–Ω–∏)": 25
};

// –ü–æ—Ä–æ–≥–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –æ–±–ª–∏—á—á—è
const FACE_RECOGNITION_THRESHOLDS = {
    "üë§ –ë–∞–∑–æ–≤–µ –≤–∏—è–≤–ª–µ–Ω–Ω—è –æ–±–ª–∏—á—á—è (–º—ñ–Ω—ñ–º—É–º –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è)": 50,
    "üë• –í–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è (–ø–æ—à—É–∫ –≤ –ë–î)": 100,
    "üîç –í–∏—Å–æ–∫–æ—Ç–æ—á–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è (–ø–æ–≥–∞–Ω–µ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è, —Ä—É—Ö)": 145
};

// –Ü–Ω—à—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
const OTHER_DETECTION_FEATURES = {
    "üíµ –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∫—É–ø—é—Ä": 300,
    "üöó –ß–∏—Ç–∞–Ω–Ω—è –Ω–æ–º–µ—Ä—ñ–≤ –∞–≤—Ç–æ": 150,
    "üöô –ß–∞—Å—Ç–∫–æ–≤–µ —á–∏—Ç–∞–Ω–Ω—è –Ω–æ–º–µ—Ä—ñ–≤": 90
};

// –ö–µ—à—É—î–º–æ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
const sortedDoriThresholds = Object.entries(DORI_THRESHOLDS)
    .sort((a, b) => b[1] - a[1]);
const sortedFaceThresholds = Object.entries(FACE_RECOGNITION_THRESHOLDS)
    .sort((a, b) => b[1] - a[1]);
const sortedMpValues = Object.keys(RESOLUTION_MAP).map(Number).sort((a, b) => b - a);

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è –∑–∞ –ø–æ—Ä–æ–≥–æ–º
function findMatchingLevel(thresholds, pxPerM) {
    for (const [level, threshold] of thresholds) {
        if (pxPerM >= threshold) return [level, threshold];
    }
    return ["‚ö†Ô∏è –ù–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è", 0];
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
document.addEventListener('DOMContentLoaded', function() {
    const selectElement = document.getElementById('megapixels');
    const form = document.getElementById('pixelWizardForm');
    const resultBox = document.getElementById('resultBox');
    const resultContent = document.getElementById('resultContent');
    
    // –ï–ª–µ–º–µ–Ω—Ç–∏ –ø–æ–≤–∑—É–Ω–∫—ñ–≤ —Ç–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
    const fovSlider = document.getElementById('fovSlider');
    const fovInput = document.getElementById('fov');
    const fovValue = document.getElementById('fovValue');
    const distanceSlider = document.getElementById('distanceSlider');
    const distanceInput = document.getElementById('distance');
    const distanceValue = document.getElementById('distanceValue');
    
    // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –ø–æ–≤–∑—É–Ω–∫–∞ FOV —ñ–∑ —Ç–µ–∫—Å—Ç–æ–≤–∏–º –ø–æ–ª–µ–º
    fovSlider.addEventListener('input', function() {
        fovInput.value = this.value;
    });
    
    fovInput.addEventListener('input', function() {
        const value = parseFloat(this.value);
        if (!isNaN(value) && value >= 1 && value <= 360) {
            fovSlider.value = Math.min(value, 180); // –û–±–º–µ–∂—É—î–º–æ –ø–æ–≤–∑—É–Ω–æ–∫ –¥–æ 180
        }
    });
    
    // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –ø–æ–≤–∑—É–Ω–∫–∞ –≤—ñ–¥—Å—Ç–∞–Ω—ñ —ñ–∑ —Ç–µ–∫—Å—Ç–æ–≤–∏–º –ø–æ–ª–µ–º
    distanceSlider.addEventListener('input', function() {
        distanceInput.value = this.value;
    });
    
    distanceInput.addEventListener('input', function() {
        const value = parseFloat(this.value);
        if (!isNaN(value) && value >= 0.1) {
            distanceSlider.value = Math.min(value, 100); // –û–±–º–µ–∂—É—î–º–æ –ø–æ–≤–∑—É–Ω–æ–∫ –¥–æ 100
        }
    });
    
    // –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –≤–∏–ø–∞–¥–∞—é—á–æ–≥–æ —Å–ø–∏—Å–∫—É —Ä–æ–∑–¥—ñ–ª—å–Ω–∏—Ö –∑–¥–∞—Ç–Ω–æ—Å—Ç–µ–π
    selectElement.innerHTML = '';
    
    // –î–æ–¥–∞—î–º–æ –æ–ø—Ü—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è MP
    sortedMpValues.forEach(mp => {
        const option = document.createElement('option');
        option.value = mp;
        option.textContent = `${mp} MP (${RESOLUTION_MAP[mp]} px)`;
        option.selected = mp === 2.0;
        selectElement.appendChild(option);
    });
    
    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –¥–ª—è —Ñ–æ—Ä–º–∏
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–∞ –≤–∞–ª—ñ–¥—É–≤–∞—Ç–∏ –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
        const megapixels = parseFloat(document.getElementById('megapixels').value);
        const fovDegrees = parseFloat(document.getElementById('fov').value);
        const distanceM = parseFloat(document.getElementById('distance').value);
        
        if (megapixels <= 0 || fovDegrees <= 0 || distanceM <= 0) {
            alert("–£—Å—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–∞—é—Ç—å –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0");
            return;
        }
        
        // –û—Å–Ω–æ–≤–Ω—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏
        const width_px = RESOLUTION_MAP[megapixels];
        const widthM = 2 * distanceM * Math.tan((fovDegrees / 2) * (Math.PI / 180));
        const pxPerM = width_px / widthM;
        
        // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è DORI —ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
        const [doriLevel, doriThreshold] = findMatchingLevel(sortedDoriThresholds, pxPerM) || 
            ["‚ö†Ô∏è –ù–∏–∂—á–µ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ DETECT", 0];
        
        const [faceRecognition] = findMatchingLevel(sortedFaceThresholds, pxPerM) || 
            ["‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –æ–±–ª–∏—á"];
        
        // –ê–Ω–∞–ª—ñ–∑ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π
        const specialFeatures = [];
        let hasFullPlate = false;

        // –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
        for (const [feature, threshold] of Object.entries(OTHER_DETECTION_FEATURES)) {
            if (pxPerM >= threshold) {
                if (feature === "üöó –ß–∏—Ç–∞–Ω–Ω—è –Ω–æ–º–µ—Ä—ñ–≤ –∞–≤—Ç–æ") hasFullPlate = true;
                specialFeatures.push(feature);
            }
        }

        // –Ø–∫—â–æ —î "—á–∏—Ç–∞–Ω–Ω—è –Ω–æ–º–µ—Ä—ñ–≤ –∞–≤—Ç–æ", –≤–∏–∫–ª—é—á–∞—î–º–æ "—á–∞—Å—Ç–∫–æ–≤–µ —á–∏—Ç–∞–Ω–Ω—è"
        if (hasFullPlate) {
            const partialReadIndex = specialFeatures.indexOf("üöô –ß–∞—Å—Ç–∫–æ–≤–µ —á–∏—Ç–∞–Ω–Ω—è –Ω–æ–º–µ—Ä—ñ–≤");
            if (partialReadIndex !== -1) specialFeatures.splice(partialReadIndex, 1);
        }
        
        // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        resultContent.innerHTML = generateResultHTML(
            megapixels, fovDegrees, distanceM, widthM, pxPerM,
            doriLevel, doriThreshold, faceRecognition, specialFeatures
        );
        
        resultBox.style.display = 'block';
        resultBox.scrollIntoView({ behavior: 'smooth' });
    });
});

// –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: –¥–æ–¥–∞–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä megapixels —É —Ñ—É–Ω–∫—Ü—ñ—é generateDiagramTopView
function generateDiagramTopView(distanceM, fovDegrees, pxPerM, megapixels) {
    // SVG —Ä–æ–∑–º—ñ—Ä–∏
    const svgWidth = 340;
    const svgHeight = 200; // –ó–±—ñ–ª—å—à–µ–Ω–∞ –≤–∏—Å–æ—Ç–∞ –¥–ª—è —à–∫–∞–ª–∏
    const padding = 20;
    const cameraX = padding;
    const cameraY = svgHeight / 2 - 20; // –ó–º—ñ—Å—Ç–∏—Ç–∏ –≤–≥–æ—Ä—É –¥–ª—è –º—ñ—Å—Ü—è –ø—ñ–¥ —à–∫–∞–ª—É

    // –ú–∞—Å—à—Ç–∞–±: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å (–æ–±'—î–∫—Ç –∞–±–æ 1.2*distanceM –¥–ª—è –∑–∞–ø–∞—Å—É)
    const maxDistance = Math.max(distanceM * 1.1, 1.2 * distanceM);
    const scale = (svgWidth - 2 * padding) / maxDistance;

    // –û–±'—î–∫—Ç
    const objectX = cameraX + distanceM * scale;
    const objectY = cameraY;
    const objectW = 16;
    const objectH = 24;

    // –ö—É—Ç –æ–≥–ª—è–¥—É
    const fovRad = (fovDegrees / 2) * (Math.PI / 180);
    const fovLineLen = (svgWidth - 2 * padding);

    // DORI –∑–æ–Ω–∏ (—Ä–∞–¥—ñ—É—Å–∏ –≤ –º–µ—Ç—Ä–∞—Ö)
    const doriZones = [
        { name: "üÜî –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è", color: "#ff6600", fill: "rgba(81, 255, 0, 0.25)", px: DORI_THRESHOLDS["üÜî –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è (—á—ñ—Ç–∫–æ —ñ–¥–µ–Ω. –æ—Å–æ–±—É)"] },
        { name: "üë§ –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è", color: "#cc3399", fill: "rgba(48, 13, 206, 0.25)", px: DORI_THRESHOLDS["üë§ –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è (–≤–ø—ñ–∑–Ω–∞—Ç–∏ –∑–Ω–∞–π–æ–º—É –æ—Å–æ–±—É)"] },
        { name: "üëÄ –û–≥–ª—è–¥", color: "#33cc33", fill: "rgba(51,204,51,0.25)", px: DORI_THRESHOLDS["üëÄ –û–≥–ª—è–¥ (–¥–µ—Ç–∞–ª—ñ –æ—Å–æ–±–∏/–æ–¥—è–≥)"] },
        { name: "üîç –î–µ—Ç–µ–∫—Ü—ñ—è", color: "#3399ff", fill: "rgba(51,153,255,0.25)", px: DORI_THRESHOLDS["üîç –î–µ—Ç–µ–∫—Ü—ñ—è (–≤–∏—è–≤–∏—Ç–∏ —Ä—É—Ö/–Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ª—é–¥–∏–Ω–∏)"] }
    ];

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è —Å–µ–∫—Ç–æ—Ä–∞
    function sectorPath(cx, cy, r, angle) {
        const startAngle = -angle;
        const endAngle = angle;
        const x1 = cx + r * Math.cos(startAngle);
        const y1 = cy + r * Math.sin(startAngle);
        const x2 = cx + r * Math.cos(endAngle);
        const y2 = cy + r * Math.sin(endAngle);
        const largeArc = angle > Math.PI / 2 ? 1 : 0;
        return [
            `M ${cx} ${cy}`,
            `L ${x1} ${y1}`,
            `A ${r} ${r} 0 ${largeArc} 1 ${x2} ${y2}`,
            'Z'
        ].join(' ');
    }

    // –ú–∞–ª—é—î–º–æ –∑–æ–Ω–∏ DORI (–≤—ñ–¥ –±—ñ–ª—å—à–æ—ó –¥–æ –º–µ–Ω—à–æ—ó)
    let doriSectors = '';
    
    // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —à–∏—Ä–∏–Ω–∏ –≤ –ø—ñ–∫—Å–µ–ª—è—Ö –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –º–µ–≥–∞–ø—ñ–∫—Å–µ–ª—è
    const width_px = megapixels ? RESOLUTION_MAP[megapixels] : RESOLUTION_MAP[2.0]; // –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 2.0 MP
    
    for (let i = doriZones.length - 1; i >= 0; i--) {
        const zone = doriZones[i];
        
        try {
            // –û–±—á–∏—Å–ª—é—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –≤—ñ–¥—Å—Ç–∞–Ω—å –¥–ª—è –∑–æ–Ω–∏ —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ–º–∏–ª–æ–∫
            const maxRange = (width_px / zone.px) / (2 * Math.tan(fovRad));
            
            const zoneDist = maxRange;
            const r = zoneDist * scale;
            
            doriSectors += `<path d="${sectorPath(cameraX, cameraY, r, fovRad)}" 
                          fill="${zone.fill}" stroke="${zone.color}" 
                          stroke-width="1.5" stroke-opacity="0.9"/>`;
        } catch (e) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–±—É–¥–æ–≤—ñ –∑–æ–Ω–∏ ${zone.name}:`, e);
        }
    }

    // –õ—ñ–Ω—ñ—ó –∫—É—Ç–∞ –æ–≥–ª—è–¥—É
    const fovX = cameraX + fovLineLen;
    const fovY1 = cameraY - Math.tan(fovRad) * fovLineLen;
    const fovY2 = cameraY + Math.tan(fovRad) * fovLineLen;

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ, –≤ —è–∫—ñ–π –∑–æ–Ω—ñ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –æ–±'—î–∫—Ç
    let objectZone = "–ü–æ–∑–∞ –∑–æ–Ω–∞–º–∏";
    for (const zone of doriZones) {
        if (pxPerM >= zone.px) {
            objectZone = zone.name;
            break;
        }
    }

    // –ì–µ–Ω–µ—Ä—É—î–º–æ —à–∫–∞–ª—É –≤ –º–µ—Ç—Ä–∞—Ö
    let scaleMarks = '';
    const scaleY = cameraY + 60;
    const scaleStart = cameraX;
    const scaleEnd = cameraX + maxDistance * scale;
    const majorStep = Math.ceil(maxDistance / 5); // –ö—Ä–æ–∫ –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –ø–æ–¥—ñ–ª–æ–∫ (–∫—Ä–∞—Ç–Ω–∏–π 5)
    
    // –û—Å–Ω–æ–≤–Ω–∞ –ª—ñ–Ω—ñ—è —à–∫–∞–ª–∏
    scaleMarks += `<line x1="${scaleStart}" y1="${scaleY}" x2="${scaleEnd}" y2="${scaleY}" stroke="#666" stroke-width="1"/>`;
    
    // –ú—ñ—Ç–∫–∏ —Ç–∞ –ø—ñ–¥–ø–∏—Å–∏ —à–∫–∞–ª–∏
    for (let i = 0; i <= maxDistance; i += majorStep) {
        const x = scaleStart + i * scale;
        if (x <= scaleEnd) {
            scaleMarks += `<line x1="${x}" y1="${scaleY-5}" x2="${x}" y2="${scaleY+5}" stroke="#666" stroke-width="1"/>`;
            scaleMarks += `<text x="${x}" y="${scaleY+18}" font-size="10" text-anchor="middle" fill="#666">${i} –º</text>`;
        }
    }

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —à–∏—Ä–∏–Ω–∏ –∑–æ–Ω–∏ –æ–≥–ª—è–¥—É –Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –æ–±'—î–∫—Ç–∞
    const widthAtObjectDistance = 2 * distanceM * Math.tan(fovRad);
    const halfWidth = widthAtObjectDistance / 2 * scale;

    return `
<svg width="${svgWidth}" height="${svgHeight}" style="background:#f5f9ff; border-radius:8px;">
    <!-- DORI –∑–æ–Ω–∏ -->
    ${doriSectors}
    <!-- –ö—É—Ç –æ–≥–ª—è–¥—É -->
    <line x1="${cameraX}" y1="${cameraY}" x2="${fovX}" y2="${fovY1}" stroke="#3b82f6" stroke-width="1" stroke-dasharray="3,2"/>
    <line x1="${cameraX}" y1="${cameraY}" x2="${fovX}" y2="${fovY2}" stroke="#3b82f6" stroke-width="1" stroke-dasharray="3,2"/>
    <!-- –í—ñ–¥—Ä—ñ–∑–æ–∫ –¥–æ –æ–±'—î–∫—Ç–∞ -->
    <line x1="${cameraX}" y1="${cameraY}" x2="${objectX}" y2="${objectY}" stroke="#888" stroke-width="1.5" stroke-dasharray="4,3"/>
    
    <!-- –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞ –ª—ñ–Ω—ñ—è —à–∏—Ä–∏–Ω–∏ –∑–æ–Ω–∏ –æ–≥–ª—è–¥—É -->
    <line x1="${objectX}" y1="${cameraY - halfWidth}" x2="${objectX}" y2="${cameraY + halfWidth}" 
          stroke="#666" stroke-width="1" stroke-dasharray="5,3"/>
    <text x="${objectX}" y="${objectY}" 
          font-size="10" text-anchor="start" fill="#666" transform="rotate(90, ${objectX + 7}, ${cameraY - halfWidth + 10})">
          –®–∏—Ä–∏–Ω–∞ –∑–æ–Ω–∏ –æ–≥–ª—è–¥—É ${widthAtObjectDistance.toFixed(2)} –º
    </text>
    
    <!-- –ö–∞–º–µ—Ä–∞ -->
    <rect x="${cameraX-8}" y="${cameraY-10}" width="16" height="20" rx="3" fill="#3b82f6" />
    <circle cx="${cameraX+4}" cy="${cameraY}" r="3" fill="#fff"/>
    <!-- –û–±'—î–∫—Ç -->
    <rect x="${objectX-objectW/2}" y="${objectY-objectH/2}" width="${objectW}" height="${objectH}" rx="2" fill="#ff6b6b" stroke="#c00" stroke-width="1"/>
    <text x="${(objectX-cameraX)/2+13}" y="${objectY+objectH/2}" font-size="11" text-anchor="middle" fill="#444">${distanceM} –º</text>
    <text x="${objectX}" y="${objectY-objectH/2-6}" font-size="11" text-anchor="middle" fill="#444">–û–±'—î–∫—Ç</text>
    <!-- –®–∫–∞–ª–∞ –≤ –º–µ—Ç—Ä–∞—Ö -->
    ${scaleMarks}
    <!-- –¢–µ–∫—Å—Ç FOV -->
    <text x="${cameraX-5}" y="${cameraY-18}" font-size="14" fill="#3b82f6">FOV ${fovDegrees}¬∞</text>
    <!-- –ü—ñ–¥–ø–∏—Å –∑–æ–Ω–∏ –æ–±'—î–∫—Ç–∞ -->
    <text x="${objectX}" y="${objectY+objectH/2+13}" font-size="11" text-anchor="middle" fill="#2196f3">${objectZone}</text>
</svg>
    `;
}

function generateResultHTML(megapixels, fovDegrees, distanceM, widthM, pxPerM, 
                          doriLevel, doriThreshold, faceRecognition, specialFeatures) {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ null –∑–Ω–∞—á–µ–Ω–Ω—è
    doriLevel = doriLevel || "‚ö†Ô∏è –ù–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è";
    faceRecognition = faceRecognition || "‚ö†Ô∏è –ù–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è";
    
    let featuresHTML = '';
    if (specialFeatures.length > 0) {
        featuresHTML = `<ul class="camera-list">
            ${specialFeatures.map(feature => `<li>${feature}</li>`).join('')}
        </ul>`;
    } else {
        featuresHTML = '‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—è —â—ñ–ª—å–Ω—ñ—Å—Ç—å –¥–ª—è —Å–ø–µ—Ü–º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π';
    }
    
    // –ì–µ–Ω–µ—Ä—É—î–º–æ —Å—Ö–µ–º—É –∑–æ–Ω
    // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: –ø–µ—Ä–µ–¥–∞–º–æ megapixels —è–∫ —á–µ—Ç–≤–µ—Ä—Ç–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç
    const diagram = generateDiagramTopView(distanceM, fovDegrees, pxPerM, megapixels);
    
    let html = `
    <div class="result-cctvheader"><i class="bi bi-bar-chart-fill result-cctvicon"></i> <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É –ø—ñ–∫—Å–µ–ª—å–Ω–æ—ó —â—ñ–ª—å–Ω–æ—Å—Ç—ñ:</strong></div>
    <table class="result-cctvtable zebra-table">
        <tr>
            <td class="label"><i class="bi bi-camera"></i> –†–æ–∑–¥—ñ–ª—å–Ω–∞ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å:</td>
            <td class="label">${megapixels} MP (${RESOLUTION_MAP[megapixels]} px)</td>
        </tr>
        <tr>
            <td class="label"><i class="bi bi-arrows-angle"></i> –ö—É—Ç –æ–≥–ª—è–¥—É (FOV):</td>
            <td class="label">${fovDegrees}¬∞</td>
        </tr>
        <tr>
            <td class="label"><i class="bi bi-rulers"></i> –í—ñ–¥—Å—Ç–∞–Ω—å –¥–æ –æ–±'—î–∫—Ç–∞:</td>
            <td class="label">${distanceM} –º</td>
        </tr>
        <tr>
            <td class="label"><i class="bi bi-box"></i>–®–∏—Ä–∏–Ω–∞ –∑–æ–Ω–∏ –æ–≥–ª—è–¥—É:</td>
            <td class="value"><strong>${widthM.toFixed(1)} –º</strong></td>
        </tr>
        <tr>
            <td class="label"><i class="bi bi-grid-3x3"></i> –ü—ñ–∫—Å–µ–ª—å–Ω–∞ —â—ñ–ª—å–Ω—ñ—Å—Ç—å:</td>
            <td class="value"><strong>${pxPerM.toFixed(1)} px/–º</strong></td>
        </tr>
        <tr>
            <td class="label"><i class="bi bi-shield-check"></i> –°—Ç–∞–Ω–¥–∞—Ä—Ç DORI:</td>
            <td class="value"><strong>${doriLevel} (${doriThreshold}+ px/–º)</strong></td>
        </tr>
        <tr>
            <td class="label"><i class="bi bi-person-bounding-box"></i> –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –æ–±–ª–∏—á—á—è:</td>
            <td class="value">
                <strong>
                    ${faceRecognition}
                </strong>
            </td>
        </tr>
        <tr>
            <td class="label"><i class="bi bi-stars"></i> –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:</td>
            <td class="value">
                <strong>
                ${featuresHTML}
                </strong>
            </td>
        </tr>
    </table>
    
    <div style="margin-top:15px;">
        <div style="margin-bottom:10px;"><i class="bi bi-camera-video"></i> <strong>–°—Ö–µ–º–∞ –∑–æ–Ω–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è (–≤–∏–≥–ª—è–¥ –∑–≤–µ—Ä—Ö—É):</strong></div>
        ${diagram}
    </div>
    `;
    
    return html;
}
