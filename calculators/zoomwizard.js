// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ —Ç–∞ –¥–∞–Ω—ñ
const RESOLUTION_MAP = {
    1: 1280,
    1.3: 1280,
    2: 1920,
    3: 2048,
    3.6:2560,
    4: 2688,
    5: 2560,
    6: 3072,
    8: 3840,
    12: 4000
};

const SENSOR_SIZES = {
    "1/4": 3.6, 
    "1/3.6": 4.0, 
    "1/3.2": 4.5, 
    "1/3": 4.8,
    "1/2.9": 5.0, 
    "1/2.8": 5.35, 
    "1/2.7": 5.37, 
    "1/2.5": 5.76,
    "1/2": 6.4, 
    "1/1.8": 7.18, 
    "1/1.7": 7.6, 
    "1/1.2": 10.2,
    "2/3": 8.8
};

const DORI_THRESHOLDS = {
    "DORI: –í–∏—è–≤–ª–µ–Ω–Ω—è –ª—é–¥–∏–Ω–∏ (Detection)": 25,
    "DORI: –†–æ–∑—Ä—ñ–∑–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –æ–¥—è–≥—É (Observation)": 62,
    "DORI: –í–ø—ñ–∑–Ω–∞–Ω–Ω—è –∑–Ω–∞–π–æ–º–æ–≥–æ (Recognition)": 125,
    "DORI: –ß—ñ—Ç–∫–∞ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –ª—é–¥–∏–Ω–∏ (Identification)": 250
};

// –î–æ–¥–∞—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —â—ñ–ª—å–Ω–æ—Å—Ç—ñ –ø—ñ–∫—Å–µ–ª—ñ–≤
const SPECIAL_PIXEL_DENSITY = {
    "Face AI: –ë–∞–∑–æ–≤–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è": 50,
    "Face AI: –†–æ–∑—à–∏—Ä–µ–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è": 100,
    "Face AI: –î–µ—Ç–∞–ª—å–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è": 125,
    "–ù–æ–º–µ—Ä–∏ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤": 150,
    "–ù–æ–º–µ—Ä–∏ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ –Ω–µ—á—ñ—Ç–∫—ñ": 90,
    "–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∫—É–ø—é—Ä": 300
};

// –§—É–Ω–∫—Ü—ñ—ó —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —à–∏—Ä–∏–Ω–∏ –≤ –ø—ñ–∫—Å–µ–ª—è—Ö –¥–ª—è –∑–∞–¥–∞–Ω–æ—ó —Ä–æ–∑–¥—ñ–ª—å–Ω–æ—ó –∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ
function getWidthInPixels(mp) {
    return RESOLUTION_MAP[mp];
}

// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ñ–æ–∫—É—Å–Ω–æ—ó –≤—ñ–¥—Å—Ç–∞–Ω—ñ
function calculateFocalLength(megapixels, pixelDensity, distance, sensorWidth) {
    const widthPx = getWidthInPixels(megapixels);
    return (distance * pixelDensity * sensorWidth) / widthPx;
}

// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫—É—Ç–∞ –æ–≥–ª—è–¥—É
function calculateFov(focalLength, sensorWidth) {
    return Math.degrees(2 * Math.atan(sensorWidth / (2 * focalLength)));
}

// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –∫–∞–º–µ—Ä–∏ –∑–∞ —Ñ–æ–∫—É—Å–Ω–æ—é –≤—ñ–¥—Å—Ç–∞–Ω–Ω—é
function classifyCameraType(focalLength) {
    if (focalLength <= 12) {
        return "üìπ –í–∞—Ä—ñ–æ—Ñ–æ–∫–∞–ª—å–Ω–∞ –∫–∞–º–µ—Ä–∞ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞)";
    } else if (focalLength <= 50) {
        return "üî≠ –í–∞—Ä—ñ–æ—Ñ–æ–∫–∞–ª—å–Ω–∞ –∫–∞–º–µ—Ä–∞ (long-range)";
    } else {
        return "üîÑ PTZ SpeedDome –∫–∞–º–µ—Ä–∞";
    }
}

// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —à–∏—Ä–∏–Ω–∏ –∑–æ–Ω–∏ –æ–≥–ª—è–¥—É
function calculateFovWidth(distance, focalLength, sensorWidth) {
    return distance * sensorWidth / focalLength;
}

// –û—Ü—ñ–Ω–∫–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—ñ —Ä—ñ—à–µ–Ω–Ω—è –∑–∞ –∫—É—Ç–æ–º –æ–≥–ª—è–¥—É
function practicalScore(fov) {
    if (20 <= fov && fov <= 90) {
        return Math.abs(55 - fov);  // 55¬∞ —è–∫ —ñ–¥–µ–∞–ª—å–Ω–∏–π —Å–µ—Ä–µ–¥–Ω—ñ–π –∫—É—Ç
    } else {
        return 1000 + Math.abs(55 - fov);  // –ú–µ–Ω—à –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏
    }
}

// –î–æ–ø–æ–≤–Ω–µ–Ω–Ω—è Math –æ–±'—î–∫—Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—î—é –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–∞–¥—ñ–∞–Ω —É –≥—Ä–∞–¥—É—Å–∏
Math.degrees = function(radians) {
    return radians * 180 / Math.PI;
};

// –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ –¥–ª—è –≤–ª–∞—Å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è —â—ñ–ª—å–Ω–æ—Å—Ç—ñ
function toggleCustomDensity() {
    const densitySelect = document.getElementById('pixelDensity');
    const customContainer = document.getElementById('customDensityContainer');
    
    if (densitySelect.value === 'custom') {
        customContainer.style.display = 'block';
    } else {
        customContainer.style.display = 'none';
    }
}

// –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ä–º–∏
function handleFormSubmit(event) {
    event.preventDefault();
    
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å –∑ —Ñ–æ—Ä–º–∏
    const megapixels = document.getElementById('megapixels').value;
    let pixelDensity;
    if (document.getElementById('pixelDensity').value === 'custom') {
        pixelDensity = parseFloat(document.getElementById('customDensity').value);
    } else {
        pixelDensity = parseFloat(document.getElementById('pixelDensity').value);
    }
    const distance = parseFloat(document.getElementById('distance').value);
    const sensorType = document.getElementById('sensor').value;
    const sensorWidth = SENSOR_SIZES[sensorType];
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (pixelDensity <= 0 || distance <= 0) {
        alert("–©—ñ–ª—å–Ω—ñ—Å—Ç—å –ø—ñ–∫—Å–µ–ª—ñ–≤ —Ç–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0");
        return;
    }
    
    // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è DORI —Ä—ñ–≤–Ω—è
    let doriLevel = "‚ö†Ô∏è –ù–∏–∂—á–µ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ DETECT";
    for (const [level, threshold] of Object.entries(DORI_THRESHOLDS).sort((a, b) => a[1] - b[1])) {
        if (pixelDensity >= threshold) {
            doriLevel = level;
        }
    }
    
    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ñ–æ–∫—É—Å–Ω–æ—ó –≤—ñ–¥—Å—Ç–∞–Ω—ñ
    const focalLength = calculateFocalLength(megapixels, pixelDensity, distance, sensorWidth);
    const fovDegrees = Math.degrees(2 * Math.atan(sensorWidth / (2 * focalLength)));
    const fovWidth = calculateFovWidth(distance, focalLength, sensorWidth);
    const cameraType = classifyCameraType(focalLength);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—ñ —Ä—ñ—à–µ–Ω–Ω—è
    const isPractical = (20 <= fovDegrees && fovDegrees <= 90);
    const isRealistic = (10 <= fovDegrees && fovDegrees <= 120);
    
    // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    let resultHTML = `
        <div><i class="bi bi-binoculars-fill"></i> <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É:</strong></div>
        
        <div style="margin-top:10px;"><i class="bi bi-sliders"></i> <strong>–í—Ö—ñ–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:</strong></div>
        <div>- –†–æ–∑–¥—ñ–ª—å–Ω–∞ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å: ${megapixels} MP (${RESOLUTION_MAP[megapixels]})</div>
        <div>- –©—ñ–ª—å–Ω—ñ—Å—Ç—å –ø—ñ–∫—Å–µ–ª—ñ–≤: ${pixelDensity} px/m</div>
        <div>- –†—ñ–≤–µ–Ω—å –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó: ${doriLevel}</div>
        <div>- –í—ñ–¥—Å—Ç–∞–Ω—å –¥–æ —Ü—ñ–ª—ñ: ${distance} –º</div>
        <div>- –†–æ–∑–º—ñ—Ä –º–∞—Ç—Ä–∏—Ü—ñ: ${sensorType} (${sensorWidth} –º–º)</div>
        
        <div class="result-section"><i class="bi bi-camera-fill"></i> <strong>–†–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:</strong></div>
        <div>- –ù–µ–æ–±—Ö—ñ–¥–Ω–∞ —Ñ–æ–∫—É—Å–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å: <strong>${focalLength.toFixed(1)} –º–º</strong></div>
        <div>- –ö—É—Ç –æ–≥–ª—è–¥—É (FOV): <strong>${fovDegrees.toFixed(1)}¬∞</strong></div>
        <div>- –®–∏—Ä–∏–Ω–∞ –∑–æ–Ω–∏ –Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—ñ ${distance} –º: <strong>${fovWidth.toFixed(1)} –º</strong></div>
        <div>- –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π —Ç–∏–ø –∫–∞–º–µ—Ä–∏: <strong>${cameraType}</strong></div>
    `;
    
    // –î–æ–¥–∞—î–º–æ –æ—Ü—ñ–Ω–∫—É —Ä—ñ—à–µ–Ω–Ω—è
    if (!isRealistic) {
        resultHTML += `
            <div class="result-section"><i class="bi bi-exclamation-triangle"></i> <strong>–£–≤–∞–≥–∞!</strong></div>
            <div>–†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –Ω–µ —î —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–æ—é (–∫—É—Ç –æ–≥–ª—è–¥—É: ${fovDegrees.toFixed(1)}¬∞).</div>
            <div>- –ó–∞–Ω–∞–¥—Ç–æ –≤–∏—Å–æ–∫–∞ —â—ñ–ª—å–Ω—ñ—Å—Ç—å –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ—ó –≤—ñ–¥—Å—Ç–∞–Ω—ñ</div>
            <div>- –ó–∞–Ω–∞–¥—Ç–æ –Ω–∏–∑—å–∫–∞ —Ä–æ–∑–¥—ñ–ª—å–Ω–∞ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å</div>
            <div>- –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º–µ–Ω—à–∏—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å –∞–±–æ –∑–Ω–∏–∑–∏—Ç–∏ –≤–∏–º–æ–≥–∏ –¥–æ —â—ñ–ª—å–Ω–æ—Å—Ç—ñ</div>
        `;
    } else if (!isPractical) {
        resultHTML += `
            <div class="result-section"><i class="bi bi-exclamation-triangle"></i> <strong>–£–≤–∞–≥–∞!</strong></div>
            <div>–†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –º–æ–∂–ª–∏–≤–∞, –∞–ª–µ –Ω–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞ (–∫—É—Ç –æ–≥–ª—è–¥—É: ${fovDegrees.toFixed(1)}¬∞).</div>
            <div>–û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω –∫—É—Ç—ñ–≤ –æ–≥–ª—è–¥—É: 20-90¬∞.</div>
        `;
    } else {
        resultHTML += `
            <div class="result-section"><i class="bi bi-check-circle"></i> <strong>–û–ø—Ç–∏–º–∞–ª—å–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è</strong></div>
            <div>–†–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —î –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—é —Ç–∞ —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–æ—é.</div>
        `;
    }
    
    // –î–æ–¥–∞—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    if (focalLength > 50) {
        resultHTML += `
            <div class="result-section"><i class="bi bi-lightbulb"></i> <strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è</strong></div>
            <div>–î–ª—è —Ç–∞–∫–æ—ó –≤—ñ–¥—Å—Ç–∞–Ω—ñ —ñ –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ PTZ SpeedDome –∫–∞–º–µ—Ä—É –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º —Ñ–æ–∫—É—Å—É–≤–∞–Ω–Ω—è–º —Ç–∞ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è–º.</div>
        `;
    } else if (focalLength > 13.5) {
        resultHTML += `
            <div class="result-section"><i class="bi bi-lightbulb"></i> <strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è</strong></div>
            <div>–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∞—Ä—ñ–æ—Ñ–æ–∫–∞–ª—å–Ω–∞ –∫–∞–º–µ—Ä–∞ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º —Ñ–æ–∫—É—Å–Ω–∏—Ö –≤—ñ–¥—Å—Ç–∞–Ω–µ–π (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 5-50 –º–º).</div>
        `;
    }
    
    // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    const resultBox = document.getElementById('resultBox');
    const resultContent = document.getElementById('resultContent');
    resultContent.innerHTML = resultHTML;
    resultBox.style.display = 'block';
    
    // –ü—Ä–æ–∫—Ä—É—á—É–≤–∞–Ω–Ω—è –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    resultBox.scrollIntoView({ behavior: 'smooth' });
}

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
document.addEventListener('DOMContentLoaded', function() {
    // –ù–∞–ø–æ–≤–Ω–µ–Ω–Ω—è select#megapixels —ñ–∑ RESOLUTION_MAP
    const mpSelect = document.getElementById('megapixels');
    Object.keys(RESOLUTION_MAP).forEach((mp) => {
        const opt = document.createElement('option');
        opt.value = mp;
        opt.textContent = `${mp} MP (${RESOLUTION_MAP[mp]})`;
        if (mp === "4") opt.selected = true;
        mpSelect.appendChild(opt);
    });
    
    // –ù–∞–ø–æ–≤–Ω–µ–Ω–Ω—è select#pixelDensity —ñ–∑ DORI_THRESHOLDS —Ç–∞ SPECIAL_PIXEL_DENSITY
    const densitySelect = document.getElementById('pixelDensity');
    
    // –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞—î–º–æ DORI –∑–Ω–∞—á–µ–Ω–Ω—è
    Object.entries(DORI_THRESHOLDS).forEach(([label, value]) => {
        const opt = document.createElement('option');
        opt.value = value;
        opt.textContent = `${value} px/m (${label})`;
        if (value === 250) opt.selected = true; // DORI Identification —è–∫ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        densitySelect.appendChild(opt);
    });
    
    // –î–æ–¥–∞—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
    Object.entries(SPECIAL_PIXEL_DENSITY).forEach(([label, value]) => {
        const opt = document.createElement('option');
        opt.value = value;
        opt.textContent = `${value} px/m (${label})`;
        densitySelect.appendChild(opt);
    });
    
    // –î–æ–¥–∞—î–º–æ –æ–ø—Ü—ñ—é "–Ü–Ω—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è..." –≤ –∫—ñ–Ω—Ü—ñ
    const customOpt = document.createElement('option');
    customOpt.value = 'custom';
    customOpt.textContent = '–Ü–Ω—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è...';
    densitySelect.appendChild(customOpt);
    
    // –ù–∞–ø–æ–≤–Ω–µ–Ω–Ω—è select#sensor —ñ–∑ SENSOR_SIZES
    const sensorSelect = document.getElementById('sensor');
    // –û—á–∏—â–∞—î–º–æ –Ω–∞—è–≤–Ω—ñ –æ–ø—Ü—ñ—ó
    sensorSelect.innerHTML = '';
    
    // –î–æ–¥–∞—î–º–æ –æ–ø—Ü—ñ—ó –∑ —Å–ª–æ–≤–Ω–∏–∫–∞
    Object.keys(SENSOR_SIZES).forEach((sensorType) => {
        const opt = document.createElement('option');
        opt.value = sensorType;
        let displayText = `${sensorType}"`;
        
        // –î–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è —Ç–∏–ø–æ–≤–∏—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤
        if (sensorType === "1/2.7") {
            displayText += " (—Ç–∏–ø–æ–≤–∏–π)";
            opt.selected = true; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        }
        
        opt.textContent = displayText;
        sensorSelect.appendChild(opt);
    });
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑—É/–ø—Ä–∏—Ö–æ–≤–∞–Ω–Ω—è –ø–æ–ª—è –≤–≤–æ–¥—É –≤–ª–∞—Å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è —â—ñ–ª—å–Ω–æ—Å—Ç—ñ
    document.getElementById('pixelDensity').addEventListener('change', toggleCustomDensity);
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏
    document.getElementById('zoomWizardForm').addEventListener('submit', handleFormSubmit);
});
