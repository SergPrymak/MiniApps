// –ö–∞—Ä—Ç–∞ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏—Ö –∑–¥–∞—Ç–Ω–æ—Å—Ç–µ–π –º–µ–≥–∞–ø—ñ–∫—Å–µ–ª—ñ–≤ –¥–æ —à–∏—Ä–∏–Ω–∏ –≤ –ø—ñ–∫—Å–µ–ª—è—Ö
const RESOLUTION_MAP = {
    12.0: 4000, 8.0: 3840, 6.0: 3072, 5.0: 2560, 4.0: 2688,
    3.6: 2560, 3.0: 2048, 2.0: 1920, 1.3: 1280, 1.0: 1280
};

// –ü–æ—Ä–æ–≥–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è DORI
const DORI_THRESHOLDS = {
    "üÜî –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è (—á—ñ—Ç–∫–æ —ñ–¥–µ–Ω. –æ—Å–æ–±—É)": 250, 
    "üë§ –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è (–≤–ø—ñ–∑–Ω–∞—Ç–∏ –∑–Ω–∞–π–æ–º—É –æ—Å–æ–±—É)": 125,
    "üëÄ –û–≥–ª—è–¥ (–¥–µ—Ç–∞–ª—ñ –æ—Å–æ–±–∏/–æ–¥—è–≥)": 62, 
    "üîç –î–µ—Ç–µ–∫—Ü—ñ—è (–≤–∏—è–≤–∏—Ç–∏ —Ä—É—Ö/–Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ª—é–¥–∏–Ω–∏)": 25
};

// –ü–æ—Ä–æ–≥–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –æ–±–ª–∏—á—á—è
const FACE_RECOGNITION_THRESHOLDS = {
    "üë§ –ë–∞–∑–æ–≤–µ –≤–∏—è–≤–ª–µ–Ω–Ω—è –æ–±–ª–∏—á—á—è (–º—ñ–Ω—ñ–º—É–º –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è)": 50,
    "üë• –í–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è (–ø–æ—à—É–∫ –≤ –ë–î)": 100,
    "üîç –í–∏—Å–æ–∫–æ—Ç–æ—á–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è (–ø–æ–≥–∞–Ω–µ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è, —Ä—É—Ö)": 145
};

// –Ü–Ω—à—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
const OTHER_DETECTION_FEATURES = {
    "üíµ –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∫—É–ø—é—Ä": 300,
    "üöó –ß–∏—Ç–∞–Ω–Ω—è –Ω–æ–º–µ—Ä—ñ–≤ –∞–≤—Ç–æ": 150,
    "üöô –ß–∞—Å—Ç–∫–æ–≤–µ —á–∏—Ç–∞–Ω–Ω—è –Ω–æ–º–µ—Ä—ñ–≤": 90
};

// –ö–µ—à—É—î–º–æ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
const sortedDoriThresholds = Object.entries(DORI_THRESHOLDS)
    .sort((a, b) => b[1] - a[1]);
const sortedFaceThresholds = Object.entries(FACE_RECOGNITION_THRESHOLDS)
    .sort((a, b) => b[1] - a[1]);
const sortedMpValues = Object.keys(RESOLUTION_MAP).map(Number).sort((a, b) => b - a);

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è –∑–∞ –ø–æ—Ä–æ–≥–æ–º
function findMatchingLevel(thresholds, pxPerM) {
    for (const [level, threshold] of thresholds) {
        if (pxPerM >= threshold) return [level, threshold];
    }
    return [null, 0];
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
document.addEventListener('DOMContentLoaded', function() {
    const selectElement = document.getElementById('megapixels');
    const form = document.getElementById('pixelWizardForm');
    const resultBox = document.getElementById('resultBox');
    const resultContent = document.getElementById('resultContent');
    
    // –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –≤–∏–ø–∞–¥–∞—é—á–æ–≥–æ —Å–ø–∏—Å–∫—É —Ä–æ–∑–¥—ñ–ª—å–Ω–∏—Ö –∑–¥–∞—Ç–Ω–æ—Å—Ç–µ–π
    selectElement.innerHTML = '';
    
    // –î–æ–¥–∞—î–º–æ –æ–ø—Ü—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è MP
    sortedMpValues.forEach(mp => {
        const option = document.createElement('option');
        option.value = mp;
        option.textContent = `${mp} MP (${RESOLUTION_MAP[mp]} px)`;
        option.selected = mp === 2.0;
        selectElement.appendChild(option);
    });
    
    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –¥–ª—è —Ñ–æ—Ä–º–∏
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        // –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–∞ –≤–∞–ª—ñ–¥—É–≤–∞—Ç–∏ –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
        const megapixels = parseFloat(document.getElementById('megapixels').value);
        const fovDegrees = parseFloat(document.getElementById('fov').value);
        const distanceM = parseFloat(document.getElementById('distance').value);
        
        if (megapixels <= 0 || fovDegrees <= 0 || distanceM <= 0) {
            alert("–£—Å—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–∞—é—Ç—å –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0");
            return;
        }
        
        // –û—Å–Ω–æ–≤–Ω—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏
        const width_px = RESOLUTION_MAP[megapixels];
        const widthM = 2 * distanceM * Math.tan((fovDegrees / 2) * (Math.PI / 180));
        const pxPerM = width_px / widthM;
        
        // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è DORI —ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
        const [doriLevel, doriThreshold] = findMatchingLevel(sortedDoriThresholds, pxPerM) || 
            ["‚ö†Ô∏è –ù–∏–∂—á–µ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ DETECT", 0];
        
        const [faceRecognition] = findMatchingLevel(sortedFaceThresholds, pxPerM) || 
            ["‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –æ–±–ª–∏—á"];
        
        // –ê–Ω–∞–ª—ñ–∑ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π
        const specialFeatures = [];
        let hasFullPlate = false;

        // –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ
        for (const [feature, threshold] of Object.entries(OTHER_DETECTION_FEATURES)) {
            if (pxPerM >= threshold) {
                if (feature === "üöó –ß–∏—Ç–∞–Ω–Ω—è –Ω–æ–º–µ—Ä—ñ–≤ –∞–≤—Ç–æ") hasFullPlate = true;
                specialFeatures.push(feature);
            }
        }

        // –Ø–∫—â–æ —î "—á–∏—Ç–∞–Ω–Ω—è –Ω–æ–º–µ—Ä—ñ–≤ –∞–≤—Ç–æ", –≤–∏–∫–ª—é—á–∞—î–º–æ "—á–∞—Å—Ç–∫–æ–≤–µ —á–∏—Ç–∞–Ω–Ω—è"
        if (hasFullPlate) {
            const partialReadIndex = specialFeatures.indexOf("üöô –ß–∞—Å—Ç–∫–æ–≤–µ —á–∏—Ç–∞–Ω–Ω—è –Ω–æ–º–µ—Ä—ñ–≤");
            if (partialReadIndex !== -1) specialFeatures.splice(partialReadIndex, 1);
        }
        
        // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        resultContent.innerHTML = generateResultHTML(
            megapixels, fovDegrees, distanceM, widthM, pxPerM,
            doriLevel, doriThreshold, faceRecognition, specialFeatures
        );
        
        resultBox.style.display = 'block';
        resultBox.scrollIntoView({ behavior: 'smooth' });
    });
});

// –í–∏–Ω–µ—Å–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó HTML —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
function generateResultHTML(megapixels, fovDegrees, distanceM, widthM, pxPerM, 
                          doriLevel, doriThreshold, faceRecognition, specialFeatures) {
    let html = `
        <div><i class="bi bi-graph-up"></i> <strong>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É –ø—ñ–∫—Å–µ–ª—å–Ω–æ—ó —â—ñ–ª—å–Ω–æ—Å—Ç—ñ:</strong></div>
        
        <div style="margin-top:10px;"><i class="bi bi-sliders"></i> <strong>–í—Ö—ñ–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:</strong></div>
        <div>- –†–æ–∑–¥—ñ–ª—å–Ω–∞ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å: ${megapixels} MP</div>
        <div>- –ö—É—Ç –æ–≥–ª—è–¥—É: ${fovDegrees}¬∞</div>
        <div>- –í—ñ–¥—Å—Ç–∞–Ω—å –¥–æ –æ–±'—î–∫—Ç–∞: ${distanceM} –º</div>
        <div>- –®–∏—Ä–∏–Ω–∞ –∑–æ–Ω–∏: ${widthM.toFixed(1)} –º</div>
        
        <div class="result-section"><i class="bi bi-rulers"></i> <strong>–†–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è:</strong></div>
        <div>- –ü—ñ–∫—Å–µ–ª—å–Ω–∞ —â—ñ–ª—å–Ω—ñ—Å—Ç—å: <strong>${pxPerM.toFixed(1)} px/–º</strong></div>
        
        <div class="result-section"><i class="bi bi-shield-check"></i> <strong>–°—Ç–∞–Ω–¥–∞—Ä—Ç DORI:</strong></div>
        <div>- ${doriLevel} (${doriThreshold}+ px/–º)</div>
        
        <div class="result-section"><i class="bi bi-person-bounding-box"></i> <strong>–ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –®–Ü (—Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –æ–±–ª–∏—á—á—è):</strong></div>
        <div>- ${faceRecognition}</div>
        
        <div class="result-section"><i class="bi bi-stars"></i> <strong>–°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:</strong></div>
    `;
    
    if (specialFeatures.length > 0) {
        specialFeatures.forEach(feature => {
            html += `<div>- ${feature}</div>`;
        });
    } else {
        html += '<div>- ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—è —â—ñ–ª—å–Ω—ñ—Å—Ç—å –¥–ª—è —Å–ø–µ—Ü–º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π</div>';
    }
    
    return html;
}
